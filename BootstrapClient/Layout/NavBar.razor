@inject AccountService AccountService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
    <div class="container">
        <a class="navbar-brand" href="#">Dating App</a>
        <ul class="navbar-nav me-auto mb-2 mb-md-0">
            <AuthorizeView>
                <Authorized>
                    <li class="nav-item">
                        <a class="nav-link">Matches</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link">Lists</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link">Messages</a>
                    </li>
                </Authorized>
            </AuthorizeView>
        </ul>
        <AuthorizeView>
            <Authorized>
                <div class="dropdown">
                    <a class="dropdown-toggle text-light text-decoration-none" @onclick="ToggleUserMenu" @onfocusout="HideUserMenu">Welcome user</a>
                    <div class="dropdown-menu @UserMenuCssClass">
                        <a class="dropdown-item">Edit Profile</a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" @onclick="@(Logout)">Logout</a>
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <EditForm class="d-flex" Context="formContext" Model="@loginModel" OnValidSubmit="@HandleLogin" autcomplete="off">
                    <InputText class="form-control me-2" @bind-Value="loginModel.Username" placeholder="Username"></InputText>
                    <InputText class="form-control me-2" @bind-Value="loginModel.Password" placeholder="Password"></InputText>
                    <button class="btn btn-outline-success" type="submit">Login</button>
                </EditForm>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</nav>

@code {
    [SupplyParameterFromForm] private LoginModel loginModel { get; set; } 
        = new() { Username = String.Empty, Password = String.Empty};

    bool open = false;
    
    string UserMenuCssClass => open ? "show" : null;
    
    protected override void OnInitialized()
    {
        AccountService.OnChange += StateHasChanged;
    }
    
    public void Dispose()
    {
        AccountService.OnChange -= StateHasChanged;
    }

    private async Task ToggleUserMenu()
    {
        open = !open;
    }
    
    private async Task HideUserMenu()
    {
        await Task.Delay(200);
        open = false;
    }
    
    private async Task HandleLogin()
    {
        try
        {
            await AccountService.Login(loginModel);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            // Navigation.NavigateTo("/members");
            loginModel = new() { Username = String.Empty, Password = String.Empty};
        }
        catch (Exception e)
        {
            //ToastService.ShowError(e.Message);
        }
    }

    private async Task Logout()
    {
        await AccountService.Logout();
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Navigation.NavigateTo("/");
    }
    
}