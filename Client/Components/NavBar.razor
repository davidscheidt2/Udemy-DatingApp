@inject AccountService AccountService

<FluentHeader Class="siteheader">
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
        <FluentAnchor Appearance="Appearance.Hypertext" Href="/">Dating App</FluentAnchor>

        @if (AccountService.CurrentUser != null)
        {

            <FluentAnchor Name="Home" Appearance="Appearance.Hypertext" Href="/">Matches</FluentAnchor>
            <FluentAnchor Name="About" Appearance="Appearance.Hypertext" Href="/about">Lists</FluentAnchor>
            <FluentAnchor Name="Services" Appearance="Appearance.Hypertext" Href="/services">Messages</FluentAnchor>
        }
    </FluentStack>        
    <FluentSpacer />

    @if (AccountService.CurrentUser == null)
    {
        <div class="search">
        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">

            <FluentTextField Name="username" @bind-Value="loginModel.Username" Placeholder="UserName"></FluentTextField>
            <FluentTextField Name="password" TextFieldType="TextFieldType.Password" @bind-Value="loginModel.Password" Placeholder="Password"></FluentTextField>
            <FluentButton Type="ButtonType.Submit" Icon="Login">Login</FluentButton>
            </FluentStack>
            
        </EditForm>
        </div>
    }
    
    @if (AccountService.CurrentUser != null)
    {
        <div class="search">
            <FluentAnchor Id="welcomeAnchor" Appearance="Appearance.Hypertext" OnClick="@(() => open = !open)">
                Welcome User
            </FluentAnchor>
            <FluentMenu Anchor="welcomeAnchor" @bind-Open="open">
                <FluentMenuItem Name="Profile">Edit Profile</FluentMenuItem>
                <FluentDivider />
                <FluentMenuItem Name="Logout" @onclick="@(Logout)">Logout</FluentMenuItem>
            </FluentMenu>
        </div>
    }

</FluentHeader>

@code {
    [SupplyParameterFromForm] private LoginModel loginModel { get; set; } 
        = new() { Username = String.Empty, Password = String.Empty};

    bool open = false;
    
    protected override void OnInitialized()
    {
        AccountService.OnChange += StateHasChanged;
    }
    
    public void Dispose()
    {
        AccountService.OnChange -= StateHasChanged;
    }

    private async Task HandleLogin()
    {
        Console.WriteLine("Login");
        Console.WriteLine(loginModel.Username + " " + loginModel.Password);
        
        await AccountService.Login(loginModel);
    }

    private async Task Logout()
    {
        await AccountService.Logout();
    }

}
